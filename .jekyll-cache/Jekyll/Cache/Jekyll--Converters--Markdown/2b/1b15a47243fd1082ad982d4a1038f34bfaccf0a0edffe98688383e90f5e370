I"	…<p><img src="/assets/wcexample.png" alt="Word Cloud" /></p>

<p>Today, I am going to show you how to make it rain data with word clouds. Sure, there are free and paid resources out there with more advanced features but if all you want is something simple, private and free then why not roll your own?</p>

<p>Youâ€™ll need Python 3.x, wordcloud, natural language toolkit (nltk), pyperclip, collections, and regex (re).</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">1</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">wordcloud</span> <span class="kn">import</span> <span class="n">WordCloud</span>
<span class="mi">2</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="mi">3</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">words</span>
<span class="mi">4</span><span class="p">:</span> <span class="kn">import</span> <span class="nn">pyperclip</span>
<span class="mi">5</span><span class="p">:</span> <span class="kn">import</span> <span class="nn">re</span>
</code></pre></div></div>

<p>Like many of my friends, I am in the middle of a job search and my hope is that this little demonstration might help some of you guys out there in your search as well.
This python script is an attempt do the following things:</p>
<ul>
  <li>Generate a word cloud from a job description, filtering out stop words and common English words</li>
  <li>Get the top 20 words from the word cloud.</li>
  <li>Try to find keywords by searching all capitalized words and filtering out common English words</li>
  <li>Get the top 20 capitalized words from the word cloud.</li>
  <li>Add the Top word and Capitalized words to a csv text file for later analysis in excel</li>
</ul>

<p>Beginning in the main part of the script, on line 45 it opens the stop words text file and reads it into the <code class="language-plaintext highlighter-rouge">stops</code> list. Stop words are common, high frequency words. WordCloud will remove stop words by default but the text can be refined further by utilizing a customizable stop word file.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">43</span><span class="p">:</span> <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
<span class="mi">44</span><span class="p">:</span>     
<span class="mi">45</span><span class="p">:</span>     <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'stop.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
<span class="mi">46</span><span class="p">:</span>         <span class="n">stops</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">lower</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="mi">47</span><span class="p">:</span>
<span class="mi">48</span><span class="p">:</span>     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
<span class="mi">49</span><span class="p">:</span>         <span class="n">myfile</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Copy text to cliboard and enter a file name (or exit to quit): '</span><span class="p">)</span>
<span class="mi">50</span><span class="p">:</span>         
<span class="mi">51</span><span class="p">:</span>         <span class="c1">#Give the user a way out
</span><span class="mi">52</span><span class="p">:</span>         <span class="k">if</span> <span class="n">myfile</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'quit'</span><span class="p">,</span> <span class="s">'exit'</span><span class="p">,</span> <span class="s">'stop'</span><span class="p">,</span> <span class="s">'q'</span><span class="p">]:</span>
<span class="mi">53</span><span class="p">:</span>             <span class="k">break</span>
<span class="mi">54</span><span class="p">:</span>         
<span class="mi">55</span><span class="p">:</span>         <span class="c1">#Top, most common words
</span><span class="mi">56</span><span class="p">:</span>         <span class="n">text</span> <span class="o">=</span> <span class="n">read_clipboard</span><span class="p">(</span><span class="n">stops</span><span class="p">)</span>
<span class="mi">57</span><span class="p">:</span>         <span class="n">top</span> <span class="o">=</span> <span class="n">get_top_words</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">58</span><span class="p">:</span>         <span class="n">generate_cloud</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">myfile</span><span class="p">)</span>
<span class="mi">59</span><span class="p">:</span>         <span class="n">write_tuples</span><span class="p">(</span><span class="n">myfile</span><span class="p">,</span><span class="s">'TOP'</span><span class="p">,</span><span class="n">top</span><span class="p">)</span>
<span class="mi">60</span><span class="p">:</span>         
</code></pre></div></div>

<p>Notice the <code class="language-plaintext highlighter-rouge">while True</code> loop on line 48. This is done because it takes time to load all the modules and it allows the user to generate more than one word cloud while running the script.. On line 52, the user is given a way out by allowing a few keywords that will cause it to enter the breakpoint.</p>

<p>On line 56, it calls the <code class="language-plaintext highlighter-rouge">read_clipboard(stops)</code> function, passing in the stop words list. It starts by reading text from the clipboard with <code class="language-plaintext highlighter-rouge">pyperclip</code>. Then it filters out the stop words by using list comprehension on line 11. On line 12, which is currently commented out (as an optional step), it can do further filtering to remove most words from the english language. However, this isnâ€™t smart enough to recognize plurals and past/future tense forms of english verbs.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">09</span><span class="p">:</span> <span class="k">def</span> <span class="nf">read_clipboard</span><span class="p">(</span><span class="n">stops</span><span class="p">):</span>
<span class="mi">10</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="n">pyperclip</span><span class="p">.</span><span class="n">paste</span><span class="p">().</span><span class="n">lower</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="mi">11</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">text</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
<span class="mi">12</span><span class="p">:</span>     <span class="c1">#text = [x for x in text if x.lower() not in words.words()]
</span><span class="mi">13</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">14</span><span class="p">:</span>     <span class="k">return</span> <span class="n">text</span>
</code></pre></div></div>

<p>On line 57, it calls the the <code class="language-plaintext highlighter-rouge">get_top_words(text)</code> function, passing in the filtered <code class="language-plaintext highlighter-rouge">text</code> string from the clipboard. This function uses <code class="language-plaintext highlighter-rouge">Counter</code> (line 17) to get the most commonly occurring words in the string. The returned <code class="language-plaintext highlighter-rouge">top</code> variable is a list of tuples that will be written to a text file later on, as part of the data collection process.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">16</span><span class="p">:</span> <span class="k">def</span> <span class="nf">get_top_words</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
<span class="mi">17</span><span class="p">:</span>     <span class="n">top</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="bp">None</span><span class="p">)).</span><span class="n">most_common</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="mi">18</span><span class="p">:</span>     <span class="k">return</span> <span class="n">top</span>
</code></pre></div></div>

<p>Line 58 is where the first word cloud is generated by calling the <code class="language-plaintext highlighter-rouge">generate_cloud(text,myfile)</code> function. On line 21, the <code class="language-plaintext highlighter-rouge">WordCloud</code> object is instantiated and on line 22 the text is passed to its generate method. Finally on line 23, it writes the output to an image file with the file name that was passed to it.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">20</span><span class="p">:</span> <span class="k">def</span> <span class="nf">generate_cloud</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">myfile</span><span class="p">):</span>
<span class="mi">21</span><span class="p">:</span>     <span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">(</span><span class="n">max_font_size</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">800</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="p">).</span><span class="n">generate</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">22</span><span class="p">:</span>     <span class="n">wc</span><span class="p">.</span><span class="n">generate</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">23</span><span class="p">:</span>     <span class="n">wc</span><span class="p">.</span><span class="n">to_file</span><span class="p">(</span><span class="n">myfile</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="s">'.'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">'.png'</span><span class="p">)</span>
</code></pre></div></div>

<p>On line 59 it makes a function call to write csv data: <code class="language-plaintext highlighter-rouge">write_tuples(myfile,'TOP',top)</code>. It iterates through and writes the text from each element of the tuple (i), separated by commas. It can be useful to collect this data for later analysis.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">33</span><span class="p">:</span> <span class="k">def</span> <span class="nf">write_tuples</span><span class="p">(</span><span class="n">myfile</span><span class="p">,</span><span class="n">flag</span><span class="p">,</span><span class="n">lot</span><span class="p">):</span>
<span class="mi">34</span><span class="p">:</span>     <span class="c1">#myfile is the description / company name
</span><span class="mi">35</span><span class="p">:</span>     <span class="c1">#lot is the list of tuples
</span><span class="mi">36</span><span class="p">:</span>     <span class="c1">#flag specifies if it is coming from top words or capital words
</span><span class="mi">37</span><span class="p">:</span>     <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'counts.txt'</span><span class="p">,</span> <span class="s">'a'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
<span class="mi">38</span><span class="p">:</span>         <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lot</span><span class="p">:</span>
<span class="mi">39</span><span class="p">:</span>             <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">myfile</span> <span class="o">+</span> <span class="s">','</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="s">','</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">','</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
<span class="mi">40</span><span class="p">:</span>             <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="mi">41</span><span class="p">:</span>         <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

</code></pre></div></div>

<p>The second code block repeats the same process, except for the first step on line 61 where it calls a function <code class="language-plaintext highlighter-rouge">get_capitalized_words</code> which uses a regular expression on line 27  to find all the capitalized words in the originally copied text. A second word cloud is then generated from the capital words, filtered for stop words and (most) english words, leaving (mostly) specific technical terms.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">61</span><span class="p">:</span>         <span class="c1">#Capital, key words
</span><span class="mi">62</span><span class="p">:</span>         <span class="n">text</span> <span class="o">=</span> <span class="n">get_capitalized_words</span><span class="p">(</span><span class="n">stops</span><span class="p">)</span>
<span class="mi">63</span><span class="p">:</span>         <span class="n">generate_cloud</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="s">'CAP_'</span> <span class="o">+</span> <span class="n">myfile</span><span class="p">)</span>
<span class="mi">64</span><span class="p">:</span>         <span class="n">cap</span> <span class="o">=</span> <span class="n">get_top_words</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">65</span><span class="p">:</span>         <span class="n">write_tuples</span><span class="p">(</span><span class="n">myfile</span><span class="p">,</span><span class="s">'CAP'</span><span class="p">,</span><span class="n">cap</span><span class="p">)</span>
</code></pre></div></div>

<p>We can find all capitalized words using the regex search string <code class="language-plaintext highlighter-rouge">[A-Z]\w+</code> on line 27.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">25</span><span class="p">:</span> <span class="k">def</span> <span class="nf">get_capitalized_words</span><span class="p">(</span><span class="n">stops</span><span class="p">):</span>
<span class="mi">26</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="n">pyperclip</span><span class="p">.</span><span class="n">paste</span><span class="p">()</span>
<span class="mi">27</span><span class="p">:</span>     <span class="n">capwords</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="s">"[A-Z]\w+"</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="mi">28</span><span class="p">:</span>     <span class="n">capwords</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">capwords</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
<span class="mi">29</span><span class="p">:</span>     <span class="n">capwords</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">capwords</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">words</span><span class="p">.</span><span class="n">words</span><span class="p">()]</span>
<span class="mi">30</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">capwords</span><span class="p">)</span>
<span class="mi">31</span><span class="p">:</span>     <span class="k">return</span> <span class="n">text</span>
</code></pre></div></div>

<p>I hope you will find this script useful or at least interesting enough to give it a try. See below for the complete script. Copy it and save it in a directory along with stops.txt.</p>
<h2 id="complete-script">Complete Script</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">01</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">wordcloud</span> <span class="kn">import</span> <span class="n">WordCloud</span>
<span class="mi">02</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="mi">03</span><span class="p">:</span> <span class="kn">from</span> <span class="nn">nltk.corpus</span> <span class="kn">import</span> <span class="n">words</span>
<span class="mi">04</span><span class="p">:</span> <span class="kn">import</span> <span class="nn">pyperclip</span>
<span class="mi">05</span><span class="p">:</span> <span class="kn">import</span> <span class="nn">re</span>
<span class="mi">06</span><span class="p">:</span> 
<span class="mi">07</span><span class="p">:</span> <span class="c1">#nltk.download('words') - only had to do this once, the first time
</span><span class="mi">08</span><span class="p">:</span> 
<span class="mi">09</span><span class="p">:</span> <span class="k">def</span> <span class="nf">read_clipboard</span><span class="p">(</span><span class="n">stops</span><span class="p">):</span>
<span class="mi">10</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="n">pyperclip</span><span class="p">.</span><span class="n">paste</span><span class="p">().</span><span class="n">lower</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="mi">11</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">text</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
<span class="mi">12</span><span class="p">:</span>     <span class="c1">#text = [x for x in text if x not in words.words()]
</span><span class="mi">13</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">14</span><span class="p">:</span>     <span class="k">return</span> <span class="n">text</span>
<span class="mi">15</span><span class="p">:</span> 
<span class="mi">16</span><span class="p">:</span> <span class="k">def</span> <span class="nf">get_top_words</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
<span class="mi">17</span><span class="p">:</span>     <span class="n">top</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="bp">None</span><span class="p">)).</span><span class="n">most_common</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="mi">18</span><span class="p">:</span>     <span class="k">return</span> <span class="n">top</span>
<span class="mi">19</span><span class="p">:</span> 
<span class="mi">20</span><span class="p">:</span> <span class="k">def</span> <span class="nf">generate_cloud</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">myfile</span><span class="p">):</span>
<span class="mi">21</span><span class="p">:</span>     <span class="n">wc</span> <span class="o">=</span> <span class="n">WordCloud</span><span class="p">(</span><span class="n">max_font_size</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">800</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="p">).</span><span class="n">generate</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">22</span><span class="p">:</span>     <span class="n">wc</span><span class="p">.</span><span class="n">generate</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">23</span><span class="p">:</span>     <span class="n">wc</span><span class="p">.</span><span class="n">to_file</span><span class="p">(</span><span class="n">myfile</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="s">'.'</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">'.png'</span><span class="p">)</span>
<span class="mi">24</span><span class="p">:</span> 
<span class="mi">25</span><span class="p">:</span> <span class="k">def</span> <span class="nf">get_capitalized_words</span><span class="p">(</span><span class="n">stops</span><span class="p">):</span>
<span class="mi">26</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="n">pyperclip</span><span class="p">.</span><span class="n">paste</span><span class="p">()</span>
<span class="mi">27</span><span class="p">:</span>     <span class="n">capwords</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="s">"[A-Z]\w+"</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="mi">28</span><span class="p">:</span>     <span class="n">capwords</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">capwords</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">stops</span><span class="p">]</span>
<span class="mi">29</span><span class="p">:</span>     <span class="n">capwords</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">capwords</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">words</span><span class="p">.</span><span class="n">words</span><span class="p">()]</span>
<span class="mi">30</span><span class="p">:</span>     <span class="n">text</span> <span class="o">=</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">capwords</span><span class="p">)</span>
<span class="mi">31</span><span class="p">:</span>     <span class="k">return</span> <span class="n">text</span>
<span class="mi">32</span><span class="p">:</span> 
<span class="mi">33</span><span class="p">:</span> <span class="k">def</span> <span class="nf">write_tuples</span><span class="p">(</span><span class="n">myfile</span><span class="p">,</span><span class="n">flag</span><span class="p">,</span><span class="n">lot</span><span class="p">):</span>
<span class="mi">34</span><span class="p">:</span>     <span class="c1">#myfile is the description / company name
</span><span class="mi">35</span><span class="p">:</span>     <span class="c1">#lot is the list of tuples
</span><span class="mi">36</span><span class="p">:</span>     <span class="c1">#flag specifies if it is coming from top words or capital words
</span><span class="mi">37</span><span class="p">:</span>     <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'counts.txt'</span><span class="p">,</span> <span class="s">'a'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
<span class="mi">38</span><span class="p">:</span>         <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">lot</span><span class="p">:</span>
<span class="mi">39</span><span class="p">:</span>             <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">myfile</span> <span class="o">+</span> <span class="s">','</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="s">','</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">+</span> <span class="s">','</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
<span class="mi">40</span><span class="p">:</span>             <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
<span class="mi">41</span><span class="p">:</span>         <span class="n">f</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
<span class="mi">42</span><span class="p">:</span> 
<span class="mi">43</span><span class="p">:</span> <span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
<span class="mi">44</span><span class="p">:</span>     
<span class="mi">45</span><span class="p">:</span>     <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'stop.txt'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf8'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
<span class="mi">46</span><span class="p">:</span>         <span class="n">stops</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">lower</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="n">sep</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="mi">47</span><span class="p">:</span>     
<span class="mi">48</span><span class="p">:</span>     <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
<span class="mi">49</span><span class="p">:</span>         <span class="n">myfile</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">'Copy text to cliboard and enter a file name (or exit to quit): '</span><span class="p">)</span>
<span class="mi">50</span><span class="p">:</span>         
<span class="mi">51</span><span class="p">:</span>         <span class="c1">#Give the user a way out
</span><span class="mi">52</span><span class="p">:</span>         <span class="k">if</span> <span class="n">myfile</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">[</span><span class="s">'quit'</span><span class="p">,</span> <span class="s">'exit'</span><span class="p">,</span> <span class="s">'stop'</span><span class="p">,</span> <span class="s">'q'</span><span class="p">]:</span>
<span class="mi">53</span><span class="p">:</span>             <span class="k">break</span>
<span class="mi">54</span><span class="p">:</span>         
<span class="mi">55</span><span class="p">:</span>         <span class="c1">#Top, most common words
</span><span class="mi">56</span><span class="p">:</span>         <span class="n">text</span> <span class="o">=</span> <span class="n">read_clipboard</span><span class="p">(</span><span class="n">stops</span><span class="p">)</span>
<span class="mi">57</span><span class="p">:</span>         <span class="n">top</span> <span class="o">=</span> <span class="n">get_top_words</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">58</span><span class="p">:</span>         <span class="n">generate_cloud</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="n">myfile</span><span class="p">)</span>
<span class="mi">59</span><span class="p">:</span>         <span class="n">write_tuples</span><span class="p">(</span><span class="n">myfile</span><span class="p">,</span><span class="s">'TOP'</span><span class="p">,</span><span class="n">top</span><span class="p">)</span>
<span class="mi">60</span><span class="p">:</span>         
<span class="mi">61</span><span class="p">:</span>         <span class="c1">#Capital, key words
</span><span class="mi">62</span><span class="p">:</span>         <span class="n">text</span> <span class="o">=</span> <span class="n">get_capitalized_words</span><span class="p">(</span><span class="n">stops</span><span class="p">)</span>
<span class="mi">63</span><span class="p">:</span>         <span class="n">generate_cloud</span><span class="p">(</span><span class="n">text</span><span class="p">,</span><span class="s">'CAP_'</span> <span class="o">+</span> <span class="n">myfile</span><span class="p">)</span>
<span class="mi">64</span><span class="p">:</span>         <span class="n">cap</span> <span class="o">=</span> <span class="n">get_top_words</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="mi">65</span><span class="p">:</span>         <span class="n">write_tuples</span><span class="p">(</span><span class="n">myfile</span><span class="p">,</span><span class="s">'CAP'</span><span class="p">,</span><span class="n">cap</span><span class="p">)</span>
<span class="mi">66</span><span class="p">:</span> 
</code></pre></div></div>
:ET