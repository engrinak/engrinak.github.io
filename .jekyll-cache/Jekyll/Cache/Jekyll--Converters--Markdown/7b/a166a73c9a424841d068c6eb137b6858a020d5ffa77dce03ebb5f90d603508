I"A<p><img src="/assets/20210310/2021-01-25_DSC6273.jpg" alt="Aurora in Fairbanks" /></p>

<h1 id="intro">Intro</h1>

<p>In this post I will answer the question: can you detect disturbances in the earth’s magnetic field using a cheap magnetometer and a Raspberry Pi? I will try to condense weeks of tinkering and testing down into a few paragraphs describing how I managed to get real measurements from the sensor. After that I will look at some of my data and compare it with data from a real <a href="https://www.usgs.gov/products/data-and-tools/real-time-data/geomagnetism">USGS observatory</a> to see how it compares to actual scientific measurements.
The RM3100 sensor I purchased from Amazon came with a link to a datasheet and some example code written for some other type of development board in C. I could find little reference to this sensor on any other blog or forum, except for one seemingly unfinished project on Github. I was not able to glean anything useful from the example C code, but I took some cues from the datasheet and followed an example sequence diagram and after a couple weeks of trial and error, I was able to establish that my python code was working and that my measurements were indeed valid. This all comes at a time when geomagnetic activity has been peaking, and in addition to some cool Aurora Borealis photos, I have also captured some cool data that has indeed confirmed the validity of the measurement.</p>

<h1 id="connection">Connection</h1>

<p>The first thing I did was hash out the connection to the Pi via SPI interface, but before I could make a successful connection, I needed to solder the board in place.</p>

<p><img src="/assets/20210310/IMG_4676.jpg" alt="Rm3100" /></p>

<p>The RM3100 board (I would almost call it a chip because it is so tiny) came configured with <a href="https://learn.sparkfun.com/tutorials/how-to-solder-castellated-mounting-holes/all">castellated vias</a> – something that I had never soldered before. I was able to solder in some header pins through an empty perforated project board with plated thru holes, the opposite side of which the RM3100 was situated, receiving the short side of the pins. Using plenty of flux paste and a high wattage soldering iron, I was able to get the solder to flow into place quickly, cleanly and without burning any of the components or my fingers. A breadboard acted as a fixture for the pins while soldering them in place. I had to use a helping hand magnifying glass however because of the tiny nature of such a soldering job and the fact that my vision is not what it used to be.</p>

<p><img src="/assets/20210310/redboard.png" alt="Red Board" /></p>

<h1 id="take-a-single-measurement">Take a single measurement</h1>

<p>The steps to make a measurement from the RM3100 are as follows:</p>
<ul>
  <li>Initiate a single measurement by sending an 8 bit code with the axes that you want to read.
    <ol>
      <li>0ZYX0000 is the byte format, with a 1 or a 0 in the Z, Y or X place to specify that a measurement should be made on that particular axis.</li>
      <li>I want to read all 3 axes, so the byte code I use is: 01110000, which converted to hexadecimal value (for use in python code) is 0x70.</li>
    </ol>
  </li>
  <li>Confirm new data ready.
    <ol>
      <li>DRDY is the “ready” pin on the chip. I connected this to one of the inputs (GPIO 22) on the Pi and am checking the status of the pin.</li>
      <li>Normally, I would write a for loop to wait until data is ready, but I had some issues in doing that. So instead, I input an arbitrary wait time (time.sleep) before reading the DRDY pin once just for confirmation.</li>
      <li>Rather than reading the DRDY pin status, it is also possible to read the status register. I preferred to read the physical pin so that I could see the virtual oscilloscope output with PiScope.</li>
    </ol>
  </li>
  <li>Read the measurement results.
    <ol>
      <li>To read the results of all the axes, all you must do is clock out a single byte with a hexadecimal value of A4. This is the address of the first part of the x-axis registers. The chip will then immediately send back 3 bytes for each axis (9 bytes total).</li>
      <li>In order to receive those 9 bytes, the Pi has to clock out 9 null bytes.</li>
      <li>The three bytes of each axis then must be concatenated together.
        <ul>
          <li>If the three bytes are “01111111” “10101010” “00000011” then the result for that axis would be “011111111010101000000011”</li>
          <li>This value is encoded in <a href="https://stackoverflow.com/questions/1604464/twos-complement-in-python">Two’s Complement</a>  format, which allows for negative values in binary.</li>
          <li>After conversion back to base 10, the number tends to range from 3000 to 5000 and is linearly proportional to the magnetic field.</li>
        </ul>
      </li>
      <li>Calculate total field value, the root sum square of the 3 axis values.</li>
    </ol>
  </li>
</ul>

<h1 id="single-measurement-sequence-piscope-output">Single Measurement Sequence (PiScope Output)</h1>

<p>Here is what the measurement sequence looks like on the pins.
<img src="/assets/20210310/piscope.png" alt="PiScope" /></p>

<h1 id="python-code">Python Code</h1>

<p><strong><a href="https://github.com/engrinak/ObsPi/blob/master/GetMagData.py">Here</a></strong> is a link to the python code that does all this.</p>
:ET